# secao_gans.py
import streamlit as st
import torch
import numpy as np
import matplotlib.pyplot as plt
from gans_utils import Generator, LATENT_SIZE

# --- FUN√á√ÉO PARA CARREGAR O GERADOR ---
@st.cache_resource
def carregar_gerador(caminho_modelo):
    """Carrega o modelo gerador pr√©-treinado."""
    modelo = Generator()
    # Carrega o estado do modelo, mapeando para CPU caso tenha sido treinado em GPU
    modelo.load_state_dict(torch.load(caminho_modelo, map_location=torch.device('cpu')))
    modelo.eval() # Coloca o modelo em modo de avalia√ß√£o
    return modelo

def mostrar_imagem_gerada(gerador, noise):
    """Gera e exibe uma imagem a partir de um vetor de ru√≠do."""
    with torch.no_grad():
        imagem_falsa = gerador(noise).detach().cpu()
    
    fig, ax = plt.subplots(figsize=(4, 4))
    ax.imshow(imagem_falsa[0, 0], cmap='gray')
    ax.axis('off')
    st.pyplot(fig)

def mostrar():
    st.markdown('<h2 class="section-header">üé® GANs: A Arte de Gerar Imagens</h2>', unsafe_allow_html=True)
    
    try:
        gerador = carregar_gerador('assets/gan/generator_final.pth')
    except FileNotFoundError:
        st.error(
            "**Arquivo do modelo n√£o encontrado!**\n\n"
            "Por favor, execute o [notebook do Google Colab](https://colab.research.google.com/drive/1yZtq7y_g2Q3Qy0G1L85vV8yHkQ6H9p1?usp=sharing) "
            "para treinar o modelo, baixe o `gan_assets.zip` e extraia seu conte√∫do para a pasta `assets/gan/` do seu projeto."
        )
        return

    # --- PARTE 1: O CONCEITO ---
    st.markdown("""
    As **Redes Advers√°rias Generativas (GANs)** s√£o uma das ideias mais fascinantes em Machine Learning. Elas consistem em duas redes neurais que competem em um jogo:
    
    - **üé® O Gerador (Falsificador):** Sua miss√£o √© criar dados falsos (neste caso, imagens de d√≠gitos) que sejam indistingu√≠veis dos dados reais.
    - **üïµÔ∏è O Discriminador (Detetive):** Sua miss√£o √© identificar corretamente se uma imagem √© real (do dataset MNIST) ou falsa (criada pelo Gerador).
    
    Ambos treinam juntos. O Gerador melhora ao enganar o Discriminador, e o Discriminador melhora ao detectar as fraudes do Gerador. O resultado desse "jogo" √© um Gerador extremamente habilidoso em criar dados realistas.
    """)
    
    
    st.markdown("---")
    
    # --- PARTE 2: A JORNADA DO TREINAMENTO ---
    st.subheader("Visualizando o Aprendizado")
    st.markdown("Abaixo, voc√™ pode ver a evolu√ß√£o do Gerador ao longo do treinamento. No in√≠cio, ele produz apenas ru√≠do. Ao final, ele aprendeu a gerar d√≠gitos convincentes.")
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("#### Evolu√ß√£o das Imagens Geradas")
        st.image("assets/gan/gan_training_progress.gif", caption="Imagens geradas por um mesmo vetor de ru√≠do em diferentes √©pocas.")
    
    with col2:
        st.markdown("#### O Jogo Advers√°rio (Perdas)")
        st.image("assets/gan/loss_plot.png", caption="Loss do Gerador (G) e Discriminador (D).")
        st.info("üí° **Objetivo:** O Gerador melhora quando sua perda (`loss_g`) diminui. O Discriminador melhora quando sua perda (`loss_d`) √© baixa. O equil√≠brio ideal acontece quando o Discriminador n√£o consegue mais diferenciar (sua `loss` fica perto de 0.69, ou 50% de acerto).")

    st.markdown("---")

    # --- PARTE 3: PLAYGROUND DO GERADOR ---
    st.subheader("üéÆ Playground do Espa√ßo Latente")
    st.markdown("""
    Agora √© sua vez de ser o artista! O Gerador transforma um vetor de n√∫meros aleat√≥rios (o **espa√ßo latente**) em uma imagem. 
    Altere os valores na **barra lateral esquerda** para explorar como pequenas mudan√ßas no ru√≠do de entrada criam diferentes d√≠gitos.
    """)

    # ‚úÖ CORRE√á√ÉO: Adicionando os controles que estavam faltando na barra lateral.
    st.sidebar.subheader("Controles da GAN")
    st.sidebar.markdown("Use estes controles para manipular a imagem gerada em tempo real.")
    
    # Controle para a semente aleat√≥ria, que define o "ponto de partida" do ru√≠do
    seed = st.sidebar.slider("Semente Aleat√≥ria (Seed)", 1, 100, 42, help="Mude a semente para gerar um d√≠gito completamente novo e, em seguida, ajuste suas caracter√≠sticas.")
    
    st.sidebar.markdown("Ajuste as primeiras 5 'caracter√≠sticas' do d√≠gito:")
    
    # Sliders para as 5 primeiras dimens√µes do vetor latente
    dim_controles = []
    for i in range(5):
        # Usamos st.sidebar para colocar os sliders na barra lateral
        dim_controles.append(st.sidebar.slider(f"Caracter√≠stica {i+1}", -2.0, 2.0, 0.0, 0.1))

    # Gera o vetor de ru√≠do com base nos controles do usu√°rio
    torch.manual_seed(seed) # Garante que o resto do ru√≠do (dimens√µes 6 a 100) seja consistente
    noise_vector = torch.randn(1, LATENT_SIZE, 1, 1)
    
    # Substitui as primeiras 5 dimens√µes do ru√≠do pelos valores dos sliders
    for i, val in enumerate(dim_controles):
        noise_vector[0, i, 0, 0] = val

    # Exibe a imagem gerada
    st.markdown("#### Imagem Gerada em Tempo Real")
    mostrar_imagem_gerada(gerador, noise_vector)
    
    with st.expander("O que √© o Espa√ßo Latente?"):
        st.markdown("""
        O **espa√ßo latente** √© uma representa√ß√£o comprimida e abstrata dos dados que o Gerador aprendeu. Cada dimens√£o nesse espa√ßo pode controlar uma caracter√≠stica da imagem (como a inclina√ß√£o de um '7', a espessura de um '1' ou a abertura de um '9').
        
        Ao navegar por este espa√ßo usando os sliders, voc√™ est√° efetivamente pedindo ao Gerador para misturar as caracter√≠sticas que ele aprendeu e criar novas amostras. √â a base da criatividade dos modelos generativos!
        """)